[include]
  path = ~/.gitconfig_LOCAL

[user]
  name = Stephen Herbein
[core]
  autocrlf = input
  whitespace = warn,space-before-tab,tab-in-indent,trailing-space
  excludesfile = ~/.gitignore_global
	pager = diff-so-fancy | less --tabs=4 -RFX
[apply]
  whitespace = warn
[alias]
#  br = branch
  ci = commit
  co = checkout
  df = diff
  g = grep -I
  lg = log -p
  pp = !"echo 'Pull'; git pull; echo 'Push'; git push"
  rb = rbranch
  rv = review
  st = status
  ksdiff = difftool -y -t Kaleidoscope
[color]
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[merge]
  log = true
[rerere]
  enabled = 1
[url "https://github.com/"]
  insteadOf = "gh-https:"
[url "git@github.com:"]
  insteadOf = "gh:"
  insteadOf = "gh-ssh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
  insteadOf = "github:"
[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
  insteadOf = "gist:"
[github]
    user = SteVwonder
[alias]
    setupstream = "!f() { \
        local rem=$(git remote | grep '^origin$'); \
        if [ -z \"$rem\" ]; then \
            echo 'No \"origin\" remote found.' >&2; \
            return; \
        fi; \
        if [ \"$rem\" = upstream ]; then \
            echo '\"upstream\" remote already exists.'; \
            return; \
        fi; \
        git remote rename \"$rem\" upstream; \
        echo \"Renamed $rem to upstream.\"; \
    }; f"
    # adds a fork of a github user
    addfork = "!f() { \
        if [ -z \"$(git remote | grep '^upstream$')\" ]; then \
            echo 'No upstream remote found.' >&2; \
            return; \
        fi; \
        if [ -n \"$(git remote | grep $1)\" ]; then \
            echo \"$1 remote already exists.\"; \
            return; \
        fi; \
        if [ -z \"$(git remote get-url upstream | grep 'github.com')\" ]; then \
            echo '\"upstream\" is not a github remote'; \
            return; \
        fi; \
        local url=$(git remote get-url upstream | sed -E 's$(github.com[:/])([^/]+)$\\1'$1'$'); \
        git remote add $1 $url; \
        echo \"Set $1 remote to $url.\"; \
    }; f"
    addmyfork = "!f() { \
        if [ -z \"$(git remote | grep '^upstream$')\" ]; then \
            echo 'No upstream remote found.' >&2; \
            return; \
        fi; \
        if [ -n \"$(git remote | grep 'stevwonder')\" ]; then \
            echo '\"stevwonder\" remote already exists.'; \
            return; \
        fi; \
        if [ -z \"$(git remote get-url upstream | grep 'github.com')\" ]; then \
            echo '\"upstream\" is not a github remote'; \
            return; \
        fi; \
        local url=$(git remote get-url upstream | sed -E 's$.*github.com[:/]([^/]+)$gh-ssh:SteVwonder$'); \
        git remote add stevwonder $url; \
        echo \"Set stevwonder remote to $url.\"; \
    }; f"
    alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ / | cut -c 1-80

    root = "rev-parse --show-toplevel"

    bro = for-each-ref --sort=-committerdate refs/heads/ \
           --format='%(HEAD) %(color:cyan)%(align:15,left)(%(committerdate:relative))%(end)%(color:reset) %(if)%(HEAD)%(then)%(color:green)%(refname:short)%(color:reset)%(else)%(refname:short)%(end) - [%(color:blue)%(upstream:short)%(color:reset)]'
    # From Todd Gamblin's dotfiles: https://github.com/tgamblin/dotfiles/blob/master/home/.gitconfig
    br = branch --sort=-committerdate \
        --format '%(HEAD) %(color:red)%(objectname:short)%(color:reset)  %(if)%(HEAD)%(then)%(color:green)%(refname:short)%(color:reset)%(else)%(refname:short)%(end) - %(color:cyan)(%(committerdate:relative)%(if:notequals=Stephen Herbein)%(authorname)%(then), %(color:bold blue)by %(authorname)%(color:reset)%(color:cyan)%(end))%(color:reset)%(if)%(upstream)%(then) -> %(color:magenta)%(upstream:short) %(color:white)%(upstream:track)%(color:reset)%(end)'
    #
    # `git b` with no arguments shows branches ordered by commit date
    # (most recent first)
    #
    # With arguments, it behaves like `git branch`
    #
    b = !"f() { \
            if [ $# -ne 0 ]; then \
                git branch \"$@\"; \
            else \
                git for-each-ref --sort=-committerdate refs/heads/ \
                --format='%(HEAD) %(color:red)%(objectname:short)%(color:reset)  %(if)%(HEAD)%(then)%(color:green)%(refname:short)%(color:reset)%(else)%(refname:short)%(end) - %(color:cyan)(%(committerdate:relative))%(color:reset)'; \
            fi; \
        }; f"

    #
    # Fancy logging: shows DAG in ascii with color alongside commits.
    #
    # - lg:  Fancy log for current branch.
    # - lga: Fancy log for all branches.
    #
    lg = log --oneline --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%aN <%ae>%Creset' --abbrev-commit
    lgm = log --first-parent  --oneline --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%aN>%Creset' --abbrev-commit
    lgb = log --first-parent  --oneline --color --graph --pretty=format:'%s' --abbrev-commit
    lga = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%aN>%Creset' --abbrev-commit --branches --remotes --tags

    #
    # These will purge branches that have already been merged.
    #
    # - bpurge:       uses git branch -d
    # - bpurge-force: uses git branch -D
    #
    bpurge = "!git branch --merged | \
               grep -v '^\\*|master|develop|release' | \
               xargs -n 1 git branch -d"
    bpurge-force = "!git branch --merged | \
                     egrep -v '^\\*|master|develop|release' | \
                     xargs -n 1 git branch -D"
[pull]
	ff = only
[diff "sopsdiffer"]
	textconv = sops -d
